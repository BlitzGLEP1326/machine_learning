First we create a synthetic data set of points:

n = 10;
coordinates = [10 * rand(n, 1) (360/n:360/n:360)']
x = coordinates(:,1) .* sin(pi / 180 * coordinates(:,2))
y = coordinates(:,1) .* cos(pi / 180 * coordinates(:,2))
plot(x, y, "x", "markersize", 10, "linewidth", 3)
print -dpng points.png
save points x y

##############################

Now, we can load the points:
load points

The optimal solution:

xy = [x y]
p = 1:size(xy, 1)
path = [xy(p,:); xy(1,:)]
plot(path(:,1), path(:,2), "linewidth", 3, "markersize", 10)

A random solution:

p = randperm(size(xy, 1))
path = [xy(p,:); xy(1,:)]  # last point is start point
plot(path(:,1), path(:,2), "linewidth", 3, "markersize", 10)

# berechnet die Länge des Pfades vom Startpunkt bis zum Endpunkt
# der letzte Punkt muss wieder der Startpunkt sein, da man zum
# Startpunkt zurückkehren muss

function f = fitness(X)
        f = sum(arrayfun(@(i) sqrt(sumsq(X(i, :) - X(i - 1, :))), 2:size(X, 1)))
end

